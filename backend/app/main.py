import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
import uvicorn

from app.core.config import settings
from app.core.database import engine, get_db
from app.api.v1 import api_router
from app.models import Base
from app.clients import discord_client, spworlds_client
from app.services import role_checker_service

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
Base.metadata.create_all(bind=engine)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # Startup
    print(f"üöÄ –ó–∞–ø—É—Å–∫ {settings.PROJECT_NAME} v{settings.VERSION}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    try:
        spworlds_ping = await spworlds_client.ping()
        print(f"‚úÖ SP-Worlds API: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if spworlds_ping else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    except Exception as e:
        print(f"‚ùå SP-Worlds API: –æ—à–∏–±–∫–∞ - {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
    if settings.ROLE_CHECK_INTERVAL > 0:
        role_checker_task = asyncio.create_task(role_checker_service.start())
        print(f"‚úÖ –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {settings.ROLE_CHECK_INTERVAL} –º–∏–Ω)")
    else:
        role_checker_task = None
        print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω")

    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")

    yield

    # Shutdown
    print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {settings.PROJECT_NAME}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
    if role_checker_task:
        await role_checker_service.stop()
        role_checker_task.cancel()
        try:
            await role_checker_task
        except asyncio.CancelledError:
            pass
        print("‚úÖ –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç—ã
    await discord_client.close()
    await spworlds_client.close()
    print("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    lifespan=lifespan,
    description="""
    ## –†–ü –°–µ—Ä–≤–µ—Ä - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    –ë—ç–∫—ç–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏ –∂–∏—Ç–µ–ª–µ–π –∏ —à—Ç—Ä–∞—Ñ–∞–º–∏ –Ω–∞ –†–ü —Å–µ—Ä–≤–µ—Ä–µ.
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Discord —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–µ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å SP-Worlds API.

    ### –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    * **Discord –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è** - OAuth2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Discord
    * **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π** - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π —Å Discord —Å–µ—Ä–≤–µ—Ä–æ–º
    * **SP-Worlds –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - –ü–æ–ª—É—á–µ–Ω–∏–µ Minecraft –Ω–∏–∫–Ω–µ–π–º–æ–≤ —á–µ—Ä–µ–∑ SP-Worlds API
    * **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏** - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∂–∏—Ç–µ–ª–µ–π
    * **–°–∏—Å—Ç–µ–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤** - –í—ã–ø–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞–º–∏
    * **–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ** - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    ### –†–æ–ª–∏:
    * **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** - –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ä–æ–ª—å Discord: "{admin_role}")
    * **–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π** - –†–∞–±–æ—Ç–∞ —Å –ø–∞—Å–ø–æ—Ä—Ç–∞–º–∏ –∏ —à—Ç—Ä–∞—Ñ–∞–º–∏ (—Ä–æ–ª—å Discord: "{police_role}")

    ### –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
    1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ `/api/v1/auth/discord/login` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Discord OAuth URL
    2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Discord
    3. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–∏ —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    4. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω
    """.format(
        admin_role=settings.DISCORD_ADMIN_ROLE_NAME,
        police_role=settings.DISCORD_POLICE_ROLE_NAME
    ),
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
)

# Middleware –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ngrok
@app.middleware("http")
async def add_ngrok_header(request: Request, call_next):
    response = await call_next(request)
    response.headers["ngrok-skip-browser-warning"] = "true"
    return response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(api_router, prefix="/api/v1")


@app.get("/")
def root(response: Response):
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    """
    response.headers["ngrok-skip-browser-warning"] = "true"
    return {
        "message": "–†–ü –°–µ—Ä–≤–µ—Ä API",
        "version": settings.VERSION,
        "docs": "/docs" if settings.DEBUG else "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞",
        "discord_auth": f"/api/v1/auth/discord/login",
        "status": "running",
        "features": {
            "discord_auth": True,
            "spworlds_integration": True,
            "role_checking": settings.ROLE_CHECK_INTERVAL > 0,
            "role_check_interval": f"{settings.ROLE_CHECK_INTERVAL} –º–∏–Ω—É—Ç" if settings.ROLE_CHECK_INTERVAL > 0 else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
        }
    }


@app.get("/health")
async def health_check(response: Response):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    """
    response.headers["ngrok-skip-browser-warning"] = "true"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        from sqlalchemy import text
        db.execute(text("SELECT 1"))
        db.close()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        spworlds_status = await spworlds_client.ping()

        return {
            "status": "healthy",
            "database": "connected",
            "spworlds_api": "connected" if spworlds_status else "disconnected",
            "discord_integration": "enabled",
            "role_checker": "running" if role_checker_service.is_running else "stopped",
            "version": settings.VERSION
        }
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")


@app.get("/api/v1/auth/discord/status")
async def discord_status():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Discord –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    return {
        "discord_configured": bool(settings.DISCORD_CLIENT_ID and settings.DISCORD_CLIENT_SECRET),
        "guild_configured": bool(settings.DISCORD_GUILD_ID),
        "roles_configured": bool(settings.DISCORD_ADMIN_ROLE_NAME and settings.DISCORD_POLICE_ROLE_NAME),
        "spworlds_configured": bool(settings.SPWORLDS_MAP_ID and settings.SPWORLDS_MAP_TOKEN),
        "role_check_interval": settings.ROLE_CHECK_INTERVAL,
        "redirect_uri": settings.DISCORD_REDIRECT_URI
    }


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        log_level="info",
    )