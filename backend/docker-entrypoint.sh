#!/bin/bash
set -e

echo "üöÄ Starting RP Server Backend with Discord Auth..."
echo "üîß Environment: ${ENVIRONMENT:-development}"
echo "üóÑÔ∏è  Database: ${DATABASE_URL}"
echo "üéÆ Discord Client ID: ${DISCORD_CLIENT_ID:0:8}..."
echo "üåê SP-Worlds Map ID: ${SPWORLDS_MAP_ID}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    echo "üîç Checking environment variables..."

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Discord
    if [ -z "$DISCORD_CLIENT_ID" ]; then
        echo "‚ùå DISCORD_CLIENT_ID is required"
        exit 1
    fi

    if [ -z "$DISCORD_CLIENT_SECRET" ]; then
        echo "‚ùå DISCORD_CLIENT_SECRET is required"
        exit 1
    fi

    if [ -z "$DISCORD_GUILD_ID" ]; then
        echo "‚ùå DISCORD_GUILD_ID is required"
        exit 1
    fi

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è SP-Worlds
    if [ -z "$SPWORLDS_MAP_ID" ]; then
        echo "‚ö†Ô∏è  SPWORLDS_MAP_ID is not set, SP-Worlds integration will be disabled"
    fi

    if [ -z "$SPWORLDS_MAP_TOKEN" ]; then
        echo "‚ö†Ô∏è  SPWORLDS_MAP_TOKEN is not set, SP-Worlds integration will be disabled"
    fi

    echo "‚úÖ Environment check completed"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
wait_for_db() {
    echo "‚è≥ Waiting for database connection..."

    # –ü—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for i in {1..60}; do
        if python -c "
import psycopg2
import os
import sys
try:
    conn = psycopg2.connect(os.environ['DATABASE_URL'])
    conn.close()
    sys.exit(0)
except Exception as e:
    print(f'Database not ready: {e}')
    sys.exit(1)
" > /dev/null 2>&1; then
            echo "‚úÖ Database is ready!"
            return 0
        fi
        echo "Database is not ready yet. Retrying in 2 seconds... ($i/60)"
        sleep 2
    done

    echo "‚ùå Database connection failed after 120 seconds"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è enum —Ç–∏–ø–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
create_enums() {
    echo "üîß Creating enum types if they don't exist..."
    python -c "
import psycopg2
import os

try:
    conn = psycopg2.connect(os.environ['DATABASE_URL'])
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º enum —Ç–∏–ø—ã
    cur.execute(\"SELECT 1 FROM pg_type WHERE typname = 'userrole'\")
    if not cur.fetchone():
        cur.execute(\"CREATE TYPE userrole AS ENUM ('admin', 'police')\")
        print('‚úÖ Created userrole enum')
    else:
        print('‚úÖ userrole enum already exists')

    cur.execute(\"SELECT 1 FROM pg_type WHERE typname = 'gender'\")
    if not cur.fetchone():
        cur.execute(\"CREATE TYPE gender AS ENUM ('male', 'female')\")
        print('‚úÖ Created gender enum')
    else:
        print('‚úÖ gender enum already exists')

    conn.commit()
    cur.close()
    conn.close()
    print('‚úÖ Enum types ready')
except Exception as e:
    print(f'‚ùå Error creating enums: {e}')
    # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –º–∏–≥—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø—ã
" || echo "‚ö†Ô∏è Could not create enums manually, will try via migrations"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
run_migrations() {
    echo "üîÑ Running database migrations..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ alembic/versions
    if [ ! -d "alembic/versions" ]; then
        echo "üìÅ Creating alembic versions directory..."
        mkdir -p alembic/versions
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    migration_count=$(find alembic/versions -name "*.py" -not -name "__init__.py" | wc -l)

    if [ "$migration_count" -eq 0 ]; then
        echo "üÜï No migrations found, creating initial migration..."

        # –°–æ–∑–¥–∞–µ–º enum —Ç–∏–ø—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        create_enums

        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        python -m alembic revision --autogenerate -m "Initial Discord auth migration"
    else
        echo "üìã Found $migration_count existing migrations:"
        ls -la alembic/versions/ | grep "\.py$" | grep -v "__init__"
    fi

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    echo "‚¨ÜÔ∏è  Applying migrations..."
    python -m alembic upgrade head

    echo "‚úÖ Migrations completed successfully!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_external_services() {
    echo "üåê Checking external services..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SP-Worlds API
    if [ -n "$SPWORLDS_MAP_ID" ] && [ -n "$SPWORLDS_MAP_TOKEN" ]; then
        python -c "
import asyncio
import sys
sys.path.append('/app')
from app.clients.spworlds import spworlds_client

async def check_spworlds():
    try:
        result = await spworlds_client.ping()
        if result:
            print('‚úÖ SP-Worlds API: connected')
        else:
            print('‚ö†Ô∏è  SP-Worlds API: not responding')
    except Exception as e:
        print(f'‚ùå SP-Worlds API error: {e}')
    finally:
        await spworlds_client.close()

asyncio.run(check_spworlds())
" || echo "‚ö†Ô∏è Could not check SP-Worlds API"
    else
        echo "‚ö†Ô∏è SP-Worlds API: not configured"
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Discord API (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    echo "üîç Discord integration configured for Guild ID: ${DISCORD_GUILD_ID}"
    echo "üîç Discord roles: Police='${DISCORD_POLICE_ROLE_NAME}', Admin='${DISCORD_ADMIN_ROLE_NAME}'"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging() {
    echo "üìù Setting up logging..."

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p logs

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    chmod 755 logs

    echo "‚úÖ Logging configured"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
show_config_info() {
    echo ""
    echo "üîß Configuration Summary:"
    echo "================================"
    echo "üéÆ Discord OAuth2: Enabled"
    echo "   - Client ID: ${DISCORD_CLIENT_ID:0:8}..."
    echo "   - Guild ID: ${DISCORD_GUILD_ID}"
    echo "   - Redirect URI: ${DISCORD_REDIRECT_URI}"
    echo "   - Police Role: ${DISCORD_POLICE_ROLE_NAME}"
    echo "   - Admin Role: ${DISCORD_ADMIN_ROLE_NAME}"
    echo ""
    echo "üåê SP-Worlds Integration: $([ -n "$SPWORLDS_MAP_ID" ] && echo "Enabled" || echo "Disabled")"
    if [ -n "$SPWORLDS_MAP_ID" ]; then
        echo "   - Map ID: ${SPWORLDS_MAP_ID}"
        echo "   - API URL: ${SPWORLDS_API_URL}"
    fi
    echo ""
    echo "‚öôÔ∏è  Role Checking: $([ "$ROLE_CHECK_INTERVAL" -gt 0 ] 2>/dev/null && echo "Enabled (${ROLE_CHECK_INTERVAL} min)" || echo "Disabled")"
    echo "üîó Frontend URL: ${FRONTEND_URL}"
    echo "üõ°Ô∏è  Environment: ${ENVIRONMENT:-development}"
    echo "================================"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if [ "$1" = "python" ] || [ "$1" = "uvicorn" ] || [[ "$1" == *"uvicorn"* ]]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_environment

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging

    # –ñ–¥–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    wait_for_db

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    run_migrations

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    check_external_services

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    show_config_info

    echo "üéâ Backend initialization completed!"
    echo "üåê Starting web server..."
    echo "üìö API Documentation: $([ "$DEBUG" = "true" ] && echo "http://localhost:8000/docs" || echo "Disabled in production")"
    echo "üîê Discord Auth URL: http://localhost:8000/api/v1/auth/discord/login"
    echo ""
fi

# –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
exec "$@"