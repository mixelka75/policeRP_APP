# docker-compose.full.yml - Полная система с БД, бэкендом и фронтендом
version: '3.8'

services:
  # База данных PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: rp-server-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: rp_server_db
      POSTGRES_USER: rp_user
      POSTGRES_PASSWORD: rp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rp_user -d rp_server_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rp-network

  # Бэкенд API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rp-server-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://rp_user:rp_password@database:5432/rp_server_db
      - SECRET_KEY=super-secret-production-key-change-me-in-production
      - DEBUG=false
      - PROJECT_NAME=RP Server Backend
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin123
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    ports:
      - "8000:8000"
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rp-network

  # Фронтенд приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rp-server-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_APP_NAME=РП Сервер
      - VITE_APP_VERSION=1.0.0
    ports:
      - "3000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - rp-network

  # Reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: rp-server-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - rp-network

  # Monitoring with Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: rp-server-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - rp-network

  # Grafana for dashboards (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: rp-server-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - rp-network

  # Redis for caching (опционально)
  redis:
    image: redis:7-alpine
    container_name: rp-server-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rp-network

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  rp-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16