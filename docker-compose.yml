version: '3.8'

services:
  # База данных PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: rp_database
    environment:
      POSTGRES_DB: rp_server_db
      POSTGRES_USER: rp_user
      POSTGRES_PASSWORD: rp_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - rp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rp_user -d rp_server_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rp_backend
    environment:
      # Только backend переменные
      DATABASE_URL: postgresql://rp_user:rp_password@database:5432/rp_server_db
      SECRET_KEY: super-secret-production-key-change-me-please-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      PROJECT_NAME: "RP Server Backend"
      VERSION: "1.0.0"
      DEBUG: "false"
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: admin123
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      # Для разработки можно раскомментировать:
      # - ./app:/app/app
      # - ./alembic:/app/alembic
    depends_on:
      database:
        condition: service_healthy
    networks:
      - rp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: rp_frontend
    environment:
      # Только frontend переменные
      NODE_ENV: production
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - rp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

# Volumes
volumes:
  postgres_data:
    driver: local

# Networks
networks:
  rp_network:
    driver: bridge