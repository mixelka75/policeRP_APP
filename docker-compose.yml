# docker-compose.yml
version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: rp_server_db
      POSTGRES_USER: rp_user
      POSTGRES_PASSWORD: rp_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rp_user -d rp_server_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://rp_user:rp_password@postgres:5432/rp_server_db
      - DEBUG=true
      - ENVIRONMENT=development
      - SECRET_KEY=dev-secret-key-change-in-production
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin123
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      # Монтируем исходный код для hot reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/package.json:/app/package.json
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/postcss.config.js:/app/postcss.config.js
      - ./frontend/.env:/app/.env
      # Исключаем node_modules чтобы не перезаписать
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - rp-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  rp-network:
    driver: bridge