#!/bin/bash
set -e

echo "üöÄ Starting RP Server Backend..."
echo "üîß Environment: ${ENVIRONMENT:-development}"
echo "üóÑÔ∏è  Database: ${DATABASE_URL}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
wait_for_db() {
    echo "‚è≥ Waiting for database connection..."

    # –ü—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for i in {1..60}; do
        if python -c "
import psycopg2
import os
import sys
try:
    conn = psycopg2.connect(os.environ['DATABASE_URL'])
    conn.close()
    sys.exit(0)
except Exception as e:
    print(f'Database not ready: {e}')
    sys.exit(1)
" > /dev/null 2>&1; then
            echo "‚úÖ Database is ready!"
            return 0
        fi
        echo "Database is not ready yet. Retrying in 2 seconds... ($i/60)"
        sleep 2
    done

    echo "‚ùå Database connection failed after 120 seconds"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è enum —Ç–∏–ø–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
create_enums() {
    echo "üîß Creating enum types if they don't exist..."
    python -c "
import psycopg2
import os

try:
    conn = psycopg2.connect(os.environ['DATABASE_URL'])
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º enum —Ç–∏–ø—ã
    cur.execute(\"SELECT 1 FROM pg_type WHERE typname = 'userrole'\")
    if not cur.fetchone():
        cur.execute(\"CREATE TYPE userrole AS ENUM ('admin', 'police')\")
        print('‚úÖ Created userrole enum')
    else:
        print('‚úÖ userrole enum already exists')

    cur.execute(\"SELECT 1 FROM pg_type WHERE typname = 'gender'\")
    if not cur.fetchone():
        cur.execute(\"CREATE TYPE gender AS ENUM ('male', 'female')\")
        print('‚úÖ Created gender enum')
    else:
        print('‚úÖ gender enum already exists')

    conn.commit()
    cur.close()
    conn.close()
    print('‚úÖ Enum types ready')
except Exception as e:
    print(f'‚ùå Error creating enums: {e}')
    # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –º–∏–≥—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø—ã
" || echo "‚ö†Ô∏è Could not create enums manually, will try via migrations"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
run_migrations() {
    echo "üîÑ Running database migrations..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ alembic/versions
    if [ ! -d "alembic/versions" ]; then
        echo "üìÅ Creating alembic versions directory..."
        mkdir -p alembic/versions
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    migration_count=$(find alembic/versions -name "*.py" -not -name "__init__.py" | wc -l)

    if [ "$migration_count" -eq 0 ]; then
        echo "üÜï No migrations found, creating initial migration..."

        # –°–æ–∑–¥–∞–µ–º enum —Ç–∏–ø—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        create_enums

        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        python -m alembic revision --autogenerate -m "Initial migration with proper enums"
    else
        echo "üìã Found $migration_count existing migrations:"
        ls -la alembic/versions/ | grep "\.py$" | grep -v "__init__"
    fi

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    echo "‚¨ÜÔ∏è  Applying migrations..."
    python -m alembic upgrade head

    echo "‚úÖ Migrations completed successfully!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
create_admin() {
    echo "üë§ Checking admin user..."
    python -c "
import sys
sys.path.append('/app')
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from app.core.config import settings
from app.crud.user import user_crud
from app.schemas.user import UserCreate
from app.models.user import UserRole

try:
    engine = create_engine(settings.DATABASE_URL)
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()

    admin_user = user_crud.get_by_username(db, username=settings.ADMIN_USERNAME)
    if not admin_user:
        admin_create = UserCreate(
            username=settings.ADMIN_USERNAME,
            password=settings.ADMIN_PASSWORD,
            role=UserRole.ADMIN,
            is_active=True
        )
        admin_user = user_crud.create(db, obj_in=admin_create)
        print(f'‚úÖ Admin user created: {admin_user.username}')
    else:
        print(f'‚úÖ Admin user already exists: {admin_user.username}')

    db.close()
except Exception as e:
    print(f'‚ùå Error creating admin user: {e}')
    sys.exit(1)
"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if [ "$1" = "python" ] || [ "$1" = "uvicorn" ] || [[ "$1" == *"uvicorn"* ]]; then
    # –ñ–¥–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    wait_for_db

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    run_migrations

    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    create_admin

    echo "üéâ Backend initialization completed!"
    echo "üåê Starting web server..."
fi

# –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
exec "$@"