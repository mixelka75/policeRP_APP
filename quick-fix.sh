#!/bin/bash
# quick-fix.sh - –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫

set -e

echo "üîß –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down --remove-orphans 2>/dev/null || true
docker-compose down --remove-orphans 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞
echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
docker system prune -f

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤..."

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if [ ! -f "backend/.env" ]; then
    echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ backend/.env..."
    cp backend/.env.example backend/.env
fi

if [ ! -f "frontend/.env" ]; then
    echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ frontend/.env..."
    cp frontend/.env.example frontend/.env
fi

# –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p frontend/src/components/ui
mkdir -p frontend/src/pages
mkdir -p frontend/src/store
mkdir -p frontend/src/services
mkdir -p frontend/src/types
mkdir -p frontend/src/utils
mkdir -p frontend/src/hooks

# –ü—Ä–æ–≤–µ—Ä—è–µ–º vite.config.ts
if [ ! -f "frontend/vite.config.ts" ]; then
    echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ frontend/vite.config.ts..."
    cat > frontend/vite.config.ts << 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
    },
  },
  server: {
    port: 3000,
    host: true,
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          'react-vendor': ['react', 'react-dom'],
          'router-vendor': ['react-router-dom'],
          'ui-vendor': ['framer-motion', 'lucide-react'],
        },
      },
    },
  },
})
EOF
fi

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º backend/Dockerfile
echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend/Dockerfile..."
if [ -f "backend/Dockerfile" ]; then
    sed -i 's/CMD \["python", "-m", "uvicorn", "main:app"/CMD ["python", "-m", "uvicorn", "app.main:app"/g' backend/Dockerfile
fi

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π index.tsx –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f "frontend/src/components/ui/index.tsx" ]; then
    echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
    cat > frontend/src/components/ui/index.tsx << 'EOF'
import React from 'react';

export const Loading: React.FC<{ text?: string }> = ({ text = "–ó–∞–≥—Ä—É–∑–∫–∞..." }) => (
  <div className="flex items-center justify-center p-8">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
    <span className="ml-2 text-gray-400">{text}</span>
  </div>
);

export const Button: React.FC<React.ButtonHTMLAttributes<HTMLButtonElement>> = ({
  children,
  className = '',
  ...props
}) => (
  <button
    className={`px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors ${className}`}
    {...props}
  >
    {children}
  </button>
);

export const Input: React.FC<React.InputHTMLAttributes<HTMLInputElement> & { error?: string }> = ({
  className = '',
  error,
  ...props
}) => (
  <div>
    <input
      className={`w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded text-white focus:border-blue-500 focus:outline-none ${className}`}
      {...props}
    />
    {error && <p className="text-red-400 text-sm mt-1">{error}</p>}
  </div>
);

export const Card: React.FC<{ children: React.ReactNode; className?: string }> = ({
  children,
  className = ''
}) => (
  <div className={`bg-gray-800 rounded-lg p-6 border border-gray-700 ${className}`}>
    {children}
  </div>
);
EOF
fi

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose build --no-cache

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose ps

echo ""
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
echo -n "Backend (8000): "
sleep 5
if curl -f http://localhost:8000/health &>/dev/null; then
    echo "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs backend"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
echo -n "Frontend (3000): "
sleep 5
if curl -f http://localhost:3000 &>/dev/null; then
    echo "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs frontend"
fi

echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  docker compose logs backend    # –õ–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞"
echo "  docker compose logs frontend   # –õ–æ–≥–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
echo "  docker compose logs postgres   # –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
echo "  docker compose restart         # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  docker compose down            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"

echo ""
echo "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "Frontend: http://localhost:3000"
echo "Backend:  http://localhost:8000"
echo "API Docs: http://localhost:8000/docs"
echo "–õ–æ–≥–∏–Ω:    admin / admin123"