#!/bin/bash
# setup.sh - –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –†–ü –°–µ—Ä–≤–µ—Ä

set -e

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –†–ü –°–µ—Ä–≤–µ—Ä - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
echo "==========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_color() {
    printf "${2}${1}${NC}\n"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
if [[ $EUID -eq 0 ]]; then
   print_color "‚ùå –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root" $RED
   exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
check_command() {
    if ! command -v $1 &> /dev/null; then
        print_color "‚ùå $1 –Ω–µ –Ω–∞–π–¥–µ–Ω" $RED
        return 1
    else
        print_color "‚úÖ $1 –Ω–∞–π–¥–µ–Ω: $(command -v $1)" $GREEN
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print_color "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." $BLUE
MISSING_DEPS=""

if ! check_command "docker"; then
    MISSING_DEPS="${MISSING_DEPS}docker "
fi

if ! docker compose version &> /dev/null; then
    MISSING_DEPS="${MISSING_DEPS}docker-compose "
fi

if ! check_command "curl"; then
    MISSING_DEPS="${MISSING_DEPS}curl "
fi

if ! check_command "git"; then
    MISSING_DEPS="${MISSING_DEPS}git "
fi

if [ ! -z "$MISSING_DEPS" ]; then
    print_color "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: $MISSING_DEPS" $RED
    echo ""
    print_color "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ Ubuntu/Debian:" $BLUE
    echo "sudo apt update"
    echo "sudo apt install docker.io docker-compose curl git"
    echo "sudo usermod -aG docker \$USER"
    echo ""
    print_color "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ CentOS/RHEL:" $BLUE
    echo "sudo yum install docker docker-compose curl git"
    echo "sudo systemctl start docker"
    echo "sudo usermod -aG docker \$USER"
    echo ""
    print_color "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ macOS:" $BLUE
    echo "brew install docker docker-compose curl git"
    echo ""
    print_color "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:" $YELLOW
    echo "newgrp docker"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
print_color "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..." $BLUE
if ! docker info &> /dev/null; then
    print_color "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" $RED
    print_color "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:" $YELLOW
    echo "sudo systemctl start docker"
    echo "sudo usermod -aG docker \$USER"
    echo "newgrp docker"
    exit 1
else
    print_color "‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" $GREEN
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
print_color "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..." $BLUE

REQUIRED_DIRS=("backend" "frontend" "nginx")
REQUIRED_FILES=("docker-compose.yml" "start.sh")

for dir in "${REQUIRED_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        print_color "‚ùå –ü–∞–ø–∫–∞ $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" $RED
        exit 1
    fi
done

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        print_color "‚ùå –§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω" $RED
        exit 1
    fi
done

print_color "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞" $GREEN

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
print_color "üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..." $BLUE
mkdir -p logs
mkdir -p backups
mkdir -p nginx/ssl
mkdir -p monitoring

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
print_color "‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫..." $BLUE

if [ ! -f "backend/.env" ]; then
    if [ -f "backend/.env.example" ]; then
        cp backend/.env.example backend/.env
        print_color "‚úÖ –§–∞–π–ª backend/.env —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞" $GREEN
    else
        print_color "‚ö†Ô∏è  –§–∞–π–ª backend/.env.example –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env" $YELLOW
        cat > backend/.env << 'EOF'
DATABASE_URL=postgresql://rp_user:rp_password@database:5432/rp_server_db
SECRET_KEY=super-secret-key-change-in-production
DEBUG=false
PROJECT_NAME=RP Server Backend
ADMIN_USERNAME=admin
ADMIN_PASSWORD=admin123
ACCESS_TOKEN_EXPIRE_MINUTES=30
EOF
    fi
else
    print_color "‚úÖ –§–∞–π–ª backend/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" $GREEN
fi

if [ ! -f "frontend/.env" ]; then
    if [ -f "frontend/.env.example" ]; then
        cp frontend/.env.example frontend/.env
        print_color "‚úÖ –§–∞–π–ª frontend/.env —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞" $GREEN
    else
        print_color "‚ö†Ô∏è  –§–∞–π–ª frontend/.env.example –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env" $YELLOW
        cat > frontend/.env << 'EOF'
VITE_API_URL=http://localhost:8000
VITE_APP_NAME=–†–ü –°–µ—Ä–≤–µ—Ä
VITE_APP_VERSION=1.0.0
EOF
    fi
else
    print_color "‚úÖ –§–∞–π–ª frontend/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" $GREEN
fi

# –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if [ ! -f "nginx/ssl/cert.pem" ] || [ ! -f "nginx/ssl/key.pem" ]; then
    print_color "üîê –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..." $BLUE
    if command -v openssl &> /dev/null; then
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout nginx/ssl/key.pem \
            -out nginx/ssl/cert.pem \
            -subj "/C=RU/ST=Moscow/L=Moscow/O=RP Server/CN=localhost" 2>/dev/null
        print_color "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã" $GREEN
    else
        print_color "‚ö†Ô∏è  OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω, SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã" $YELLOW
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
print_color "üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." $BLUE
cat > monitoring/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'backend'
    static_configs:
      - targets: ['backend:8000']
    metrics_path: '/metrics'
    scrape_interval: 30s
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
print_color "üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..." $BLUE

# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
cat > quick-start.sh << 'EOF'
#!/bin/bash
echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –†–ü –°–µ—Ä–≤–µ—Ä"
echo "=========================="
echo ""
echo "Frontend: http://localhost:3000"
echo "Backend:  http://localhost:8000"
echo "API Docs: http://localhost:8000/docs"
echo ""
echo "–õ–æ–≥–∏–Ω: admin"
echo "–ü–∞—Ä–æ–ª—å: admin123"
echo ""
echo "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
./start.sh start
EOF
chmod +x quick-start.sh

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
cat > dev.sh << 'EOF'
#!/bin/bash
echo "üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –†–ü –°–µ—Ä–≤–µ—Ä"
echo "============================="
echo ""
echo "–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å hot-reload..."
./start.sh dev
EOF
chmod +x dev.sh

# –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏
cat > clean.sh << 'EOF'
#!/bin/bash
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –†–ü –°–µ—Ä–≤–µ—Ä"
echo "===================="
echo ""
read -p "–£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    ./start.sh clean
    echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞"
else
    echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
fi
EOF
chmod +x clean.sh

print_color "‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã" $GREEN

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π Docker
print_color "üê≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker:" $BLUE
docker --version
docker-compose --version

# –°–æ–∑–¥–∞–Ω–∏–µ .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f ".gitignore" ]; then
    print_color "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ .gitignore..." $BLUE
    cat > .gitignore << 'EOF'
# Environment variables
.env
.env.local
.env.production

# Logs
*.log
logs/

# Database
*.db
*.sqlite
*.sqlite3

# Docker
docker-compose.override.yml

# Backups
backups/

# SSL certificates (development only)
nginx/ssl/*.pem
nginx/ssl/*.key

# OS
.DS_Store
.DS_Store?
._*
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# Node.js
node_modules/

# Python
__pycache__/
*.pyc
venv/

# Temporary files
tmp/
temp/
*.tmp
*.temp
EOF
    print_color "‚úÖ .gitignore —Å–æ–∑–¥–∞–Ω" $GREEN
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
print_color "üß™ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..." $BLUE

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Docker Compose —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω
if docker compose config &> /dev/null; then
    print_color "‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞" $GREEN
else
    print_color "‚ùå –û—à–∏–±–∫–∞ –≤ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" $RED
    docker compose config
    exit 1
fi

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print_color "" $NC
print_color "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" $GREEN
print_color "================================" $GREEN
print_color "" $NC
print_color "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" $BLUE
print_color "  ./quick-start.sh    - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫" $GREEN
print_color "  ./dev.sh            - –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" $GREEN
print_color "  ./start.sh start    - –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫" $GREEN
print_color "  ./start.sh stop     - –û—Å—Ç–∞–Ω–æ–≤–∫–∞" $GREEN
print_color "  ./start.sh logs     - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤" $GREEN
print_color "  ./start.sh status   - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã" $GREEN
print_color "  ./clean.sh          - –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö" $GREEN
print_color "" $NC
print_color "URL –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞:" $BLUE
print_color "  Frontend: http://localhost:3000" $GREEN
print_color "  Backend:  http://localhost:8000" $GREEN
print_color "  API Docs: http://localhost:8000/docs" $GREEN
print_color "" $NC
print_color "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:" $BLUE
print_color "  –õ–æ–≥–∏–Ω:    admin" $GREEN
print_color "  –ü–∞—Ä–æ–ª—å:   admin123" $GREEN
print_color "" $NC
print_color "–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:" $YELLOW
print_color "  ./quick-start.sh" $GREEN
print_color "" $NC
print_color "üöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!" $GREEN