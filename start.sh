#!/bin/bash
# start.sh - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –†–ü –°–µ—Ä–≤–µ—Ä

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ –†–ü –°–µ—Ä–≤–µ—Ä - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
echo "========================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_color() {
    printf "${2}${1}${NC}\n"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_color "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É." $RED
        exit 1
    fi
    
    if ! docker compose version &> /dev/null; then
        print_color "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É." $RED
        exit 1
    fi

    if ! docker info &> /dev/null; then
        print_color "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É." $RED
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    local ports=("3000" "8000" "5432")
    for port in "${ports[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null; then
            print_color "‚ö†Ô∏è  –ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" $YELLOW
            read -p "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $port? (y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                local pid=$(lsof -Pi :$port -sTCP:LISTEN -t)
                kill -9 $pid 2>/dev/null || true
                print_color "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $port –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" $GREEN
            fi
        fi
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
create_env_files() {
    if [ ! -f backend/.env ]; then
        print_color "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ backend/.env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..." $BLUE
        cp backend/.env.example backend/.env
    fi

    if [ ! -f frontend/.env ]; then
        print_color "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ frontend/.env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..." $BLUE
        cp frontend/.env.example frontend/.env
    fi
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
CURRENT_MODE=""

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
start_services() {
    local mode=${1:-production}
    CURRENT_MODE=$mode

    print_color "üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: $mode" $BLUE

    case $mode in
        "dev" | "development")
            print_color "üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..." $YELLOW
            docker compose -f docker-compose.dev.yml up -d
            ;;
        "prod" | "production")
            print_color "üè≠ –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ..." $GREEN
            docker compose up -d
            ;;
        "build")
            print_color "üî® –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫..." $BLUE
            docker compose build --no-cache
            docker compose up -d
            ;;
        *)
            print_color "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $mode" $RED
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: dev, prod, build"
            exit 1
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    print_color "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." $BLUE

    local max_attempts=30
    local attempt=1
    local compose_file_arg=""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º compose —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if [[ "$CURRENT_MODE" == "dev" || "$CURRENT_MODE" == "development" ]]; then
        compose_file_arg="-f docker-compose.dev.yml"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
            print_color "‚úÖ Backend –≥–æ—Ç–æ–≤" $GREEN
            break
        else
            print_color "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ backend... ($attempt/$max_attempts)" $YELLOW
            sleep 2
            ((attempt++))
        fi
    done

    if [ $attempt -gt $max_attempts ]; then
        print_color "‚ùå Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è" $RED
        print_color "üìã –õ–æ–≥–∏ backend:" $BLUE
        docker compose $compose_file_arg logs backend | tail -20
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ compose —Ñ–∞–π–ª–µ)
    if docker compose $compose_file_arg ps --services | grep -q "^frontend$"; then
        attempt=1
        while [ $attempt -le $max_attempts ]; do
            if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
                print_color "‚úÖ Frontend –≥–æ—Ç–æ–≤" $GREEN
                break
            else
                print_color "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ frontend... ($attempt/$max_attempts)" $YELLOW
                sleep 2
                ((attempt++))
            fi
        done

        if [ $attempt -gt $max_attempts ]; then
            print_color "‚ùå Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è" $RED
            print_color "üìã –õ–æ–≥–∏ frontend:" $BLUE
            docker compose $compose_file_arg logs frontend | tail -20
            exit 1
        fi
    else
        print_color "‚ÑπÔ∏è  Frontend —Å–µ—Ä–≤–∏—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ compose —Ñ–∞–π–ª–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É" $YELLOW
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    print_color "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." $YELLOW
    docker compose down
    docker compose -f docker-compose.dev.yml down
    print_color "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" $GREEN
}

# –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
show_logs() {
    local service=${1:-""}
    if [ -z "$service" ]; then
        docker compose logs -f
    else
        docker compose logs -f $service
    fi
}

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    print_color "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:" $BLUE
    docker compose ps

    print_color "\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:" $BLUE
    print_color "Frontend: http://localhost:3000" $GREEN
    print_color "Backend:  http://localhost:8000" $GREEN
    print_color "API Docs: http://localhost:8000/docs" $GREEN
    print_color "Health:   http://localhost:8000/health" $GREEN

    print_color "\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:" $BLUE
    print_color "–õ–æ–≥–∏–Ω:    admin" $GREEN
    print_color "–ü–∞—Ä–æ–ª—å:   admin123" $GREEN
}

# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
clean_data() {
    print_color "üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..." $YELLOW
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker compose down -v
        docker volume prune -f
        print_color "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã" $GREEN
    else
        print_color "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" $RED
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    print_color "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..." $BLUE
    docker compose down
    docker compose pull
    docker compose build --no-cache
    docker-compose up -d
    print_color "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" $GREEN
}

# Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup_database() {
    local backup_name="backup_$(date +%Y%m%d_%H%M%S).sql"
    print_color "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $backup_name" $BLUE

    docker compose exec -T database pg_dump -U rp_user rp_server_db > "backups/$backup_name"
    print_color "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: backups/$backup_name" $GREEN
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
restore_database() {
    local backup_file=$1
    if [ -z "$backup_file" ]; then
        print_color "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" $RED
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore <backup_file>"
        exit 1
    fi

    if [ ! -f "$backup_file" ]; then
        print_color "‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file" $RED
        exit 1
    fi

    print_color "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑: $backup_file" $BLUE
    docker compose exec -T database psql -U rp_user -d rp_server_db < "$backup_file"
    print_color "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" $GREEN
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command=${1:-"start"}
    
    case $command in
        "start")
            create_env_files
            check_docker
            check_ports
            start_services ${2:-"production"}
            check_services
            show_status
            ;;
        "dev")
            create_env_files
            check_docker
            check_ports
            start_services "development"
            check_services
            show_status
            ;;
        "build")
            create_env_files
            check_docker
            start_services "build"
            check_services
            show_status
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            stop_services
            sleep 2
            start_services ${2:-"production"}
            check_services
            show_status
            ;;
        "logs")
            show_logs $2
            ;;
        "status")
            show_status
            ;;
        "clean")
            clean_data
            ;;
        "update")
            update_system
            ;;
        "backup")
            mkdir -p backups
            backup_database
            ;;
        "restore")
            restore_database $2
            ;;
        "help" | "-h" | "--help")
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <command> [options]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  start [mode]    - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã (production|development)"
            echo "  dev             - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
            echo "  build           - –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫"
            echo "  stop            - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  restart [mode]  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
            echo "  logs [service]  - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
            echo "  status          - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
            echo "  clean           - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
            echo "  update          - –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
            echo "  backup          - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"
            echo "  restore <file>  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
            echo "  help            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 start        # –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ"
            echo "  $0 dev          # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
            echo "  $0 logs backend # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ backend"
            echo "  $0 clean        # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
            ;;
        *)
            print_color "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command" $RED
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"